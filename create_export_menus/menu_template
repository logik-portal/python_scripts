'''
Script Name: <PresetName> Export Preset Menu Script
Script Version: 4.2
Flame Version: <FlameMinMaxVersion>
Written by: Michael Vaglienty
Creation Date: 04.27.20
Update Date: 06.23.22

Custom Action Type: Media Panel

Description:

    Right click on clip in media panel for custom export preset menu
'''

import os, re, datetime, platform, subprocess
from pyflame_lib_create_export_menus import *

SCRIPT_PROJECT = '<ScriptProject>'

def export_clips(selection):
    import flame

    def translate_token_path(clip, export_path):
        import flame

        def get_shot_name(name):

            shot_name_split = re.split(r'(\d+)', name)

            if len(shot_name_split) > 1:
                if shot_name_split[1].isalnum():
                    shot_name = shot_name_split[0] + shot_name_split[1]
                else:
                    shot_name = shot_name_split[0] + shot_name_split[1] + shot_name_split[2]
            else:
                shot_name = name

            return shot_name

        def get_seq_name(name):

            # Get sequence name abreviation from shot name

            seq_name = re.split('[^a-zA-Z]', name)[0]

            return seq_name

        print('export_path:', export_path)

        date = datetime.datetime.now()

        clip_name = str(clip.name)[1:-1]

        # Get shot name

        try:
            if clip.versions[0].tracks[0].segments[0].shot_name != '':
                shot_name = str(clip.versions[0].tracks[0].segments[0].shot_name)[1:-1]
            else:
                shot_name = get_shot_name(clip_name)
        except:
            shot_name = ''

        # Get tape name

        try:
            tape_name = str(clip.versions[0].tracks[0].segments[0].tape_name)
        except:
            tape_name = ''

        # Get Seq Name

        seq_name = get_seq_name(shot_name)

        # Replace tokens in path

        new_export_path = re.sub('<ProjectName>', flame.project.current_project.name, export_path)
        new_export_path = re.sub('<ProjectNickName>', flame.project.current_project.nickname, new_export_path)
        new_export_path = re.sub('<ShotName>',shot_name, new_export_path)
        new_export_path = re.sub('<SeqName>', seq_name, new_export_path)
        new_export_path = re.sub('<SEQNAME>', seq_name.upper(), new_export_path)
        new_export_path = re.sub('<UserName>', flame.users.current_user.name, new_export_path)
        new_export_path = re.sub('<UserNickName>', flame.users.current_user.nickname, new_export_path)
        new_export_path = re.sub('<ClipName>', str(clip.name)[1:-1], new_export_path)
        new_export_path = re.sub('<Resolution>', str(clip.width) + 'x' + str(clip.height), new_export_path)
        new_export_path = re.sub('<ClipHeight>', str(clip.height), new_export_path)
        new_export_path = re.sub('<ClipWidth>', str(clip.width), new_export_path)
        new_export_path = re.sub('<YYYY>', yyyy, new_export_path)
        new_export_path = re.sub('<YY>', yy, new_export_path)
        new_export_path = re.sub('<MM>', mm, new_export_path)
        new_export_path = re.sub('<DD>', dd, new_export_path)
        new_export_path = re.sub('<Hour>', hour, new_export_path)
        new_export_path = re.sub('<Minute>', minute, new_export_path)
        new_export_path = re.sub('<AMPM>', ampm_caps, new_export_path)
        new_export_path = re.sub('<ampm>', ampm, new_export_path)
        new_export_path = re.sub('<TapeName>', tape_name, new_export_path)

        print ('new_export_path:', new_export_path, '\n')

        return new_export_path

    print('\n')
    print('>' * 10, 'Exporting: <PresetName>', '<' * 10, '\n')

    # Get time values for token conversion

    date = datetime.datetime.now()

    yyyy = date.strftime('%Y')
    yy = date.strftime('%y')
    mm = date.strftime('%m')
    dd = date.strftime('%d')
    hour = date.strftime('%I')
    if hour.startswith('0'):
        hour = hour[1:]
    minute = date.strftime('%M')
    ampm_caps = date.strftime('%p')
    ampm = str(date.strftime('%p')).lower()

    # Initialize Exporter

    clip_output = flame.PyExporter()

    # Export selected clips

    for clip in selection:
        print (f'--> Exported: {str(clip.name)[1:-1]}\n')

    # Reveal in MediaHub

    reveal_in_mediahub = <RevealInMediaHub>

    if reveal_in_mediahub:
        flame.go_to('MediaHub')
        flame.mediahub.files.set_path(new_export_path)
        pyflame_print('Export Preset', 'MediaHub opened to export path.')

    # Reveal in Finder

    reveal_in_finder = <RevealInFinder>

    if reveal_in_finder:
        if platform.system() == 'Darwin':
            subprocess.Popen(['open', new_export_path])
        else:
            subprocess.Popen(['xdg-open', new_export_path])
        pyflame_print('Export Preset', 'Finder opened to export path.')

    pyflame_print('Export Preset', 'Export complete.')

#-------------------------------------#

def scope_clip(selection):
    import flame

    if SCRIPT_PROJECT == flame.project.current_project.name:
        for item in selection:
            if isinstance(item, flame.PyClip):
                return True
    if SCRIPT_PROJECT == 'None':
        for item in selection:
            if isinstance(item, flame.PyClip):
                return True
    return False

#-------------------------------------#

def get_media_panel_custom_ui_actions():

    return [
        {
            'name': '<PresetType> Export Presets...',
            'actions': [
                {
                    'name': '<PresetName>',
                    'isVisible': scope_clip,
                    'execute': export_clips,
                    'minimumVersion': '<FlameMinMaxVersion>',
                    'maximumVersion': '<FlameMinMaxVersion>'
                }
            ]
        }
    ]
