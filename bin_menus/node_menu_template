'''
Script Name: Bin Menu - <BinNode>
Script Version: <ScriptVersion>
Flame Version: 2022
Written by: Michael Vaglienty
Creation Date: 11.29.21
Update Date: 12.13.21

Custom Action Type: Batch

Description:

    Menu created by Bin Menus script. Adds menu for bin node to batch right-click menu.
'''

from __future__ import print_function
from PySide2 import QtWidgets, QtCore
import os

SCRIPT_PATH = '<ScriptPath>'

#-------------------------------------#

def add_node(selection):
    import flame

    print ('''
 ____  _         __  __
|  _ \(_)       |  \/  |
| |_) |_ _ __   | \  / | ___ _ __  _   _
|  _ <| | '_ \  | |\/| |/ _ \ '_ \| | | |
| |_) | | | | | | |  | |  __/ | | | |_| |
|____/|_|_| |_| |_|  |_|\___|_| |_|\__,_|
    \n''')

    print ('>' * 20, 'bin menu - <BinNode> - <ScriptVersion>', '<' * 20, '\n')

    bin_node_setup_path = '<BinNodeSetupPath>'

    if not os.path.isfile(bin_node_setup_path):
        delete_menu = message_box_confirm('Bin node no longer exists. Delete Menu?')
        if delete_menu:

            # delete menu files

            os.remove(os.path.join(SCRIPT_PATH, '<BinNode>' + '.py'))

            try:
                os.remove(os.path.join(SCRIPT_PATH, '<BinNode>' + '.pyc'))
            except:
                pass
            print ('>>> Menu files deleted <<<\n')

            # Refresh python hooks

            flame.execute_shortcut('Rescan Python Hooks')
            print ('>>> Python hooks refreshed  <<<\n')

            return message_box('Menu deleted')
        else:
            return

    # Get list of existing nodes in batch

    batch_node_list = flame.batch.nodes

    # Append bin node setup to batch

    flame.batch.append_setup(bin_node_setup_path)

    # Create list of new nodes added to batch from bin node setup

    nodes_to_move = [node for node in flame.batch.nodes if node not in batch_node_list]

    return nodes_to_move

def connect_node(selection, nodes_to_move):
    import flame

    selected_node = selection[0]

    drop_position = (selected_node.pos_x + 300, selected_node.pos_y)

    new_node = repo_node(nodes_to_move, drop_position)

    flame.batch.connect_nodes(selected_node, 'Default', new_node, 'Default')

    print ('>>> added bin node: <BinNode> <<<\n')

    print ('done\n')

def node_under_cursor(nodes_to_move):
    import flame

    # Get cursor position

    drop_position = flame.batch.cursor_position

    repo_node(nodes_to_move, drop_position)

    print ('>>> added bin node: <BinNode> <<<\n')

    print ('done\n')

def repo_node(nodes_to_move, drop_position):

    # Get position of first node from bin node setup

    first_node = nodes_to_move[0]
    first_node_pos_x = int(str(first_node.pos_x))
    first_node_pos_y = int(str(first_node.pos_y))

    # Repo first node to cursor position

    first_node.pos_x = drop_position[0]
    first_node.pos_y = drop_position[1]

    # Reposition remainng nodes to cursor position relative to original position with first node

    for node in nodes_to_move[1:]:
        node.pos_x = first_node.pos_x - (first_node_pos_x - int(str(node.pos_x)))
        node.pos_y = first_node.pos_y - (first_node_pos_y - int(str(node.pos_y)))

    return first_node

def message_box(message):

    msg_box = QtWidgets.QMessageBox()
    msg_box.setMinimumSize(400, 100)
    msg_box.setText(message)
    msg_box_button = msg_box.addButton(QtWidgets.QMessageBox.Ok)
    msg_box_button.setFocusPolicy(QtCore.Qt.NoFocus)
    msg_box_button.setMinimumSize(QtCore.QSize(80, 28))
    msg_box.setStyleSheet('QMessageBox {background-color: #313131; font: 14px "Discreet"}'
                          'QLabel {color: #9a9a9a; font: 14px "Discreet"}'
                          'QPushButton {color: #9a9a9a; background-color: #424142; border-top: 1px inset #555555; border-bottom: 1px inset black; font: 14px "Discreet"}'
                          'QPushButton:pressed {color: #d9d9d9; background-color: #4f4f4f; border-top: 1px inset #666666; font: italic}')
    msg_box.exec_()

    print ('>>> %s <<<\n' % message)

def message_box_confirm(message):

    msg_box = QtWidgets.QMessageBox()
    msg_box.setText('<b><center>%s' % message)
    msg_box_yes_button = msg_box.addButton(QtWidgets.QMessageBox.Yes)
    msg_box_yes_button.setFocusPolicy(QtCore.Qt.NoFocus)
    msg_box_yes_button.setMinimumSize(QtCore.QSize(80, 28))
    msg_box_no_button = msg_box.addButton(QtWidgets.QMessageBox.No)
    msg_box_no_button.setFocusPolicy(QtCore.Qt.NoFocus)
    msg_box_no_button.setMinimumSize(QtCore.QSize(80, 28))
    msg_box.setStyleSheet('QMessageBox {background-color: #313131; font: 14px "Discreet"}'
                          'QLabel {color: #9a9a9a; font: 14px "Discreet"}'
                          'QPushButton {color: #9a9a9a; background-color: #424142; border-top: 1px inset #555555; border-bottom: 1px inset black; font: 14px "Discreet"}'
                          'QPushButton:pressed {color: #d9d9d9; background-color: #4f4f4f; border-top: 1px inset #666666; font: italic}')

    print ('>>> %s <<<\n' % message)

    if msg_box.exec_() == QtWidgets.QMessageBox.Yes:
        return True
    return False

def scope_node(selection):
    import flame

    if selection == ():
        nodes_to_move = add_node(selection)
        node_under_cursor(nodes_to_move)
    else:
        for n in selection:
            if isinstance(n, flame.PyNode):
                nodes_to_move = add_node(n)
                connect_node(selection, nodes_to_move)

def get_batch_custom_ui_actions():

    return [
        {
            'name': 'Bin: <BinType>',
            'actions': [
                {
                    'name': '<BinNode>',
                    'execute': scope_node,
                    'minimumVersion': '2022'
                }
            ]
        }
    ]

